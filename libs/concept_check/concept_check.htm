<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<!--
  - Copyright (c) Jeremy Siek and Andrew Lumsdaine 2000
  -
  - Permission to use, copy, modify, distribute and sell this software
  - and its documentation for any purpose is hereby granted without fee,
  - provided that the above copyright notice appears in all copies and
  - that both that copyright notice and this permission notice appear
  - in supporting documentation.  We make no
  - representations about the suitability of this software for any
  - purpose.  It is provided "as is" without express or implied warranty.
  -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>コンセプト・チェック・ライブラリ</title>
</head>

<body bgcolor="white" text="black" link="#0000ee" vlink="#551a8b" alink="red"> 

<p><img src="../../c++boost.gif" alt="C++ Boost" width="277" height="86" />
<br clear="all" /></p>

<h1>The Boost Concept Check Library (BCCL)</h1>

<h2><a name="sec:concept-checking" id="sec:concept-checking"></a>
header <a href="../../boost/concept_check.hpp">
<code>boost/concept_check.hpp</code></a><br />
and <a href="../../boost/concept_archetype.hpp">
<code>boost/concept_archetype.hpp</code></a></h2>

<p>
C++ におけるジェネリック・プログラミングは、抽象データ型(あるいは「コンセプト」)を表現するためにテンプレート・パラメータを使用することを特徴としている。
しかし、C++ 言語には、クラス・テンプレートや関数テンプレートに対して、与えられたテンプレート引数がモデル化（もしくは順応）すべきコンセプトを明確に規定するためのメカニズムがない。
よく利用されているのは、必要とされるコンセプトのヒントとなるようにテンプレート・パラメータを命名し、付属文書においてコンセプトの要求事項を記述する方式である。
残念ながら、こういった要求事項の記述は、往々にして曖昧であったり不正確であったり、まったく存在しないこともある。
あるテンプレートが想定している引数の性質を、そのテンプレートのユーザーが正確に理解できなければ、それは由々しき問題となる。
さらに、以下の問題が起こりうる：</p>

<ul>
<li>
不正なテンプレート引数に起因するコンパイラ・エラー・メッセージは、難解になることが多い。
大抵の場合、エラーの示す位置はテンプレートが使用された所ではなく、ユーザーが目にする必要のないテンプレートの実装内である。
</li>

<li>
記述された要求事項が、テンプレートのコンセプトを完全に表現し切れていない場合、使用されたテンプレート引数が記述された要求事項を満足していたとしても、コンパイラ・エラーを受ける可能性がある。
</li>

<li>
記述された要求事項が、テンプレートが実際に必要とするよりも厳格である場合がある。
</li>

<li>
要求事項は、コードの中で明示的に記述されることは無い。
そのために、コードの理解がより困難になる。
さらに、コードと記述された要求事項が同期していない事態も生じる可能性がある。
</li>
</ul>

<p>Boost コンセプト・チェック・ライブラリーは、次のような手段を提供する：</p>

<ul>
<li>
テンプレート・パラメータのコンパイル時チェックを導入するためのメカニズム。
</li>

<li>
コンセプト・チェック用クラスによって、要求事項を明確化するためのフレームワーク。
</li>
<li>
コンセプトの要求事項が、該当テンプレートをカバーしていることを確認するためのメカニズム。
</li>

<li>
C++ 標準ライブラリのコンセプト要求事項に対応する、コンセプト・チェック用クラスおよび原型クラス一式。
</li>
</ul>

<p>
このメカニズムは C++ 標準の機能のみを使用し、実行時オーバーヘッドを課さない。
メカニズムを導入するコストは、コンパイル時間の増大のみである。
</p>

<p>
クラス・テンプレートや関数テンプレートを記述するプログラマは、全員が通常のコード作成作業の一環としてコンセプト・チェックを含めるべきである。
コンセプト・チェックは、コンポーネントへのインターフェイスとして公開されている、すべてのテンプレート・パラメータに対して導入すべきである。
利用したいコンセプトが標準ライブラリーで用いられているものであれば、BCCL の該当するコンセプト・チェック用クラスを、そのまま使用すればよい。
そうでなければ、新たにコンセプト・チェック用クラスを記述することになるが、普通は数行程度に収まるはずだ。
新しいコンセプトを用いるならば、対応する原型クラスも作成すべきである。原型クラスとはコンセプトを表す最小限のスケルトン実装である。
</p>

<p>
この文書を、以下の通り構成する。</p>

<ol>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#motivating-example">Motivating Example</a></li>
<li><a href="#history">History</a></li>
<li><a href="#publications">Publications</a></li>
<li><a href="#acknowledgements">Acknowledgements</a></li>
<li><a href="using_concept_check.htm">Using Concept Checks</a></li>
<li><a href="creating_concepts.htm">Creating Concept Checking Classes</a></li>
<li><a href="concept_covering.htm">Concept Covering and Archetypes</a></li>
<li><a href="prog_with_concepts.htm">Programming With Concepts</a></li>
<li><a href="implementation.htm">Implementation</a></li>
<li><a href="reference.htm">Reference</a></li>
</ol>

<p>
<a href="../../people/jeremy_siek.htm">Jeremy Siek</a> はこのライブラリを寄稿した。
<a href="../../people/beman_dawes.html">Beman Dawes</a> が公式レビューを管理した。</p>

<h2><a name="introduction" id="introduction">Introduction</a></h2>

<p>
<em>コンセプト "concept"</em> とは、ジェネリック・アルゴリズムに対する引数として与えられる型が、アルゴリズム内部で正しく使用されるために満足しなければならない要求事項(有効な式、関連型、セマンティクス不変、計算量保証など)の組み合わせである。
C++ では、コンセプトは関数テンプレート(ジェネリック・アルゴリズム)のテンプレート・パラメータとして表現される。
しかしながら、C++ にはコンセプトを表現するための明示的なメカニズムがない。テンプレート・パラメータはただのプレースホルダでしかないのだ。
慣例として、こういったパラメータには、必要とされるコンセプトに対応する名前を与える。しかし、テンプレート・パラメータを実際の型で確定するときに、C++ コンパイラはコンセプトへの遵守を強要しない。</p>

<p>
当然ながら、ジェネリック・アルゴリズムを、そのコンセプトの内、構文に関わる要求事項を満足していない型で呼び出した場合、コンパイル・エラーが生じる。
しかし、このエラーは、該当する型がコンセプトの要求事項すべてに適合していない事実を<em>本質的に</em> 反映したものではない。
それどころか、エラーはインスタンス化階層の深部で発生し、該当する型に対して式が有効でないか、想定された関連型が利用可能でないといったことが原因として挙げられることになるだろう。
こうして生じたエラーメッセージは、大抵において情報に乏しく、基本的に不可解である。</p>

<p>
必要とされるものは、インスタンス化位置(かその近傍)で「コンセプトセーフ」を強要するためのメカニズムである。
Boost コンセプト・チェック・ライブラリーは、早い段階でコンセプトの遵守を強要し、遵守していない場合のエラー・メッセージをより有用にするために C++ 標準の機能を使用する。</p>

<p>
注意すべき点は、この技術がコンセプトの要求事項のうち構文に関わる部分(有効な式および関連型)のみを扱うことである。
我々は、コンセプトの要求事項の一部であるセマンティクス不変あるいは計算量保証を扱わない。</p>

<h2><a name="motivating-example" id="motivating-example">Motivating Example</a></h2>

<p>
テンプレート・ライブラリの不正な使用法と、その結果生じるエラーメッセージを例証するために単純なサンプルを示す。
下記のコードでは、標準テンプレート・ライブラリー (STL) のジェネリックな <code>std::stable_sort()</code> アルゴリズム [<a href="bibliography.htm#austern99:_gener_progr_stl">3</a>、<a href="bibliography.htm#IB-H965502">4</a>、<a href="bibliography.htm#stepa.lee-1994:the.s:TR">5</a>] をリンクリストに適用している。</p>

<pre>
  <a href="./bad_error_eg.cpp">bad_error_eg.cpp</a>:
   1  #include &lt;list&gt;
   2  #include &lt;algorithm&gt;
   3
   4  int main(int, char*[]) {
   5    std::list&lt;int&gt; v;
   6    std::stable_sort(v.begin(), v.end());
   7    return 0;
   8  }
</pre>

<p>
この場合、<code>std::stable_sort()</code> アルゴリズムは以下のようなプロトタイプを有する：</p>

<pre>
  template &lt;class RandomAccessIterator&gt;
  void stable_sort(RandomAccessIterator first, RandomAccessIterator last);
</pre>

<p>
Gnu C++ でこのコードをコンパイルすると、以下のコンパイラ・エラーを生成する。
他のコンパイラ出力は Appendix にリストしてある<sup>(<a href="#trans_note_01">訳注1</a>)</sup>。</p>

<pre>
stl_algo.h: In function `void __merge_sort_loop&lt;_List_iterator
  &lt;int,int &amp;,int *&gt;, int *, int&gt;(_List_iterator&lt;int,int &amp;,int *&gt;,
  _List_iterator&lt;int,int &amp;,int *&gt;, int *, int)':
stl_algo.h:1448:   instantiated from `__merge_sort_with_buffer
  &lt;_List_iterator&lt;int,int &amp;,int *&gt;, int *, int&gt;(
   _List_iterator&lt;int,int &amp;,int *&gt;, _List_iterator&lt;int,int &amp;,int *&gt;,
   int *, int *)'
stl_algo.h:1485:   instantiated from `__stable_sort_adaptive&lt;
  _List_iterator&lt;int,int &amp;,int *&gt;, int *, int&gt;(_List_iterator
  &lt;int,int &amp;,int *&gt;, _List_iterator&lt;int,int &amp;,int *&gt;, int *, int)'
stl_algo.h:1524:   instantiated from here
stl_algo.h:1377: no match for `_List_iterator&lt;int,int &amp;,int *&gt; &amp; -
  _List_iterator&lt;int,int &amp;,int *&gt; &amp;'
</pre>

<p>
この場合、根本的なエラーの原因は、<code>std:list::iterator</code> が <a href="http://www.sgi.com/tech/stl/RandomAccessIterator.html" charset="us-ascii" hreflang="en-US">RandomAccessIterator</a> コンセプトをモデル化していないことにある。
リストのイテレータは双方向でしかなく、(ベクタのイテレータのように) 完全なランダム・アクセスが可能なわけではない。
残念ながら、このエラーメッセージには、ユーザーにこの事実を示すものは何もない。</p>

<p>
C++ プログラマがテンプレート・ライブラリに十分な経験を持っていれば、この手のエラーに惑うことは無いかもしれない。
しかし未熟な者にとっては、次のような理由で、このメッセージが理解し難いものとなっている。</p>

<ol>
<li>
エラーが生じる位置、<code>bad_error_eg.cpp</code> の６行目は、Gnu C++ がインスタンス化スタックを４レベルも深くまで探索して表示するという事実にもかかわらず、エラーメッセージで示されていない。</li>

<li>
エラーメッセージと、<code>std::stable_sort()</code> および <a href="http://www.sgi.com/tech/stl/RandomAccessIterator.html" charset="us-ascii" hreflang="en-US">RandomAccessIterator</a> に関する文書化された要求事項との間に、文面上の相関がない。</li>
<li>
エラーメッセージが過度に長く、ユーザーの知らない(かつ知るべきでない！) STL 内部実装用の関数がリストされている。</li>
<li>
エラーメッセージに、ライブラリ内部の実装用関数が数多くリストアップされているため、プログラマが、エラーの原因は自分のコードではなくライブラリ側にあるとの結論に、誤って飛びついてしまう可能性がある。</li>
</ol>

<p>次の例示は、より有用なメッセージとして斯くあるべきと我々が考えるものだ (また実際に Boost コンセプト・チェック・ライブラリが生成するものでもある)。
</p>

<pre>
boost/concept_check.hpp: In method `void LessThanComparableConcept
  &lt;_List_iterator&lt;int,int &amp;,int *&gt; &gt;::constraints()':
boost/concept_check.hpp:334:   instantiated from `RandomAccessIteratorConcept
  &lt;_List_iterator&lt;int,int &amp;,int *&gt; &gt;::constraints()'
bad_error_eg.cpp:6:   instantiated from `stable_sort&lt;_List_iterator
  &lt;int,int &amp;,int *&gt; &gt;(_List_iterator&lt;int,int &amp;,int *&gt;, 
  _List_iterator&lt;int,int &amp;,int *&gt;)'
boost/concept_check.hpp:209: no match for `_List_iterator&lt;int,int &amp;,int *&gt; &amp;
  &lt; _List_iterator&lt;int,int &amp;,int *&gt; &amp;'
</pre>

<p>
このメッセージは、標準的なエラー・メッセージがもつ欠点をいくつかの点で改善する。</p>

<ul>
<li>
エラーの生じた位置 (<code>bad_error_eg.cpp:6</code>）がエラーメッセージに明示されている。</li>

<li>
メッセージは、STL 文書に記述されているコンセプト (<a href="http://www.sgi.com/tech/stl/RandomAccessIterator.html" charset="us-ascii" hreflang="en-US">RandomAccessIterator</a>) を明示的に言及している。</li>

<li>
エラーメッセージははるかに短くなり、STL の内部実装用関数を露呈しない。</li>

<li>
エラーメッセージの中に <code>concept_check.hpp</code> および <code>constraints()</code> が示されることで、ライブラリ実装の中にではなくユーザーのコードにエラーがあるという事実をユーザーに警告している。</li>
</ul>

<h2><a name="history" id="history">History</a></h2>

<p>
このコンセプト・チェック・システムの初期バージョンは、著者が SGI において、C++ コンパイラおよびライブラリ・グループの一員として勤務している間に開発された。
初期バージョンは今も SGI STL ディストリビューションの一部である。
Boost コンセプト・チェック・ライブラリは、エラーメッセージにおけるそれほど有用でない表現能力を犠牲にして、コンセプト・チェック用クラス定義を非常に単純化しており、その点で SGI STLのコンセプト・チェックとは異なっている。</p>

<h2><a name="publications" id="publications">Publications</a></h2>

<ul>
<li>
<a href="http://www.oonumerics.org/tmpw00/" charset="us-ascii" hreflang="en-US">C++ テンプレート・ワークショップ2000</a>、コンセプト・チェック。</li>
</ul>

<h2><a name="acknowledgements" id="acknowledgements">Acknowledgements</a></h2>

<p>インスタンス化を引き起こすために関数ポインタを使用するアイディアは、Alexander Stepanov に拠る。
テンプレートの事前チェックに式を使用するアイディアに関して、その起源を確認できなかった。しかし、それは D&amp;E[<a href="bibliography.htm#stroustrup94:_design_evolution">2</a>] に記載されている。
STL コンセプトに関する優れた文書化と構造化を行った Matt Austern に感謝をささげる。このコンセプト・チェックは彼の仕事を基礎にしている。
有益なコメントとレビューを賜った Boost のメンバにも感謝を。
</p>

<p>
<a href="./using_concept_check.htm">次へ： Using Concept Checks</a></p>

<hr />

<h4>訳注</h4>
<ol>
<li><a name="trans_note_01" id="trans_note_01">現ヴァージョンには記載がありません。</a></li>
</ol>

<hr />

<table lang="en-US" xml:lang="en-US">
<tr valign="top">
  <td nowrap="nowrap">Copyright &copy; 2000</td>
  <td>
    <a href="../../people/jeremy_siek.htm">Jeremy Siek</a>,
    Univ.of Notre Dame (<a href="mailto:jsiek@lsc.nd.edu">jsiek@lsc.nd.edu</a>)
  </td>
</tr>
</table>

</body>
</html>
