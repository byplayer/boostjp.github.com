<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<!--
  - Copyright (c) Jeremy Siek and Andrew Lumsdaine 2000
  -
  - Permission to use, copy, modify, distribute and sell this software
  - and its documentation for any purpose is hereby granted without fee,
  - provided that the above copyright notice appears in all copies and
  - that both that copyright notice and this permission notice appear
  - in supporting documentation.  We make no
  - representations about the suitability of this software for any
  - purpose.  It is provided "as is" without express or implied warranty.
  -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Boost コンセプト･チェック･リファレンス</title>
</head>

<body bgcolor="white" text="black" link="#0000ee" vlink="#551a8b" alink="red"> 

<p><img src="../../c++boost.gif" alt="C++ Boost" width="277" height="86" />
<br clear="all" /></p>

<h2><a name="reference" id="reference">Reference</a></h2>

  <ol>
  <li><a href="#functions">関数</a></li>
  <li><a href="#macros">マクロ</a></li>
  <li><a href="#basic-concepts">基本コンセプト･チェック用クラス</a></li>
  <li><a href="#iterator-concepts">イテレータ･コンセプト･チェック用クラス</a></li>
  <li><a href="#function-object-concepts">関数オブジェクト・コンセプト･チェック用クラス</a></li>
  <li><a href="#container-concepts">コンテナ･コンセプト･チェック用クラス</a></li>
  <li><a href="#basic-archetype">基本原型クラス</a></li>
  <li><a href="#iterator-archetype">イテレータ原型クラス</a></li>
  <li><a href="#function-object-archetype">関数オブジェクト原型クラス</a></li>
  <li><a href="#container-archetype">コンテナ原型クラス</a></li>
  </ol>

<h3><a name="functions" id="functions">関数</a></h3>

<pre>
  template &lt;class Concept&gt;
  void function_requires();
</pre>

<h3><a name="macros" id="macros">マクロ</a></h3>

<pre>
  // クラス定義内でコンセプト・チェックに適用する
  BOOST_CLASS_REQUIRE(<i>type</i>, <i>namespace-of-concept</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRE2(<i>type1</i>, <i>type2</i>, <i>namespace-of-concept</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRE3(<i>type1</i>, <i>type2</i>, <i>type3</i>, <i>namespace-of-concept</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRE4(<i>type1</i>, <i>type2</i>, <i>type3</i>, <i>type4</i>, <i>namespace-of-concept</i>, <i>concept</i>);
</pre>

<p>推奨されないマクロ：</p>

<pre>
  // クラス定義内でコンセプト・チェックに適用する
  BOOST_CLASS_REQUIRES(<i>type</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRES2(<i>type1</i>, <i>type2</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRES3(<i>type1</i>, <i>type2</i>, <i>type3</i>, <i>concept</i>);
  BOOST_CLASS_REQUIRES4(<i>type1</i>, <i>type2</i>, <i>type3</i>, <i>type4</i>, <i>concept</i>);
</pre>

<h3><a name="basic-concepts" id="basic-concepts">基本コンセプト･チェック用クラス</a></h3>

<pre>
  template &lt;class T&gt;
  struct IntegerConcept; // T は組み込み整数型であるか？

  template &lt;class T&gt;
  struct SignedIntegerConcept; // T は組み込み符号付き整数型であるか？

  template &lt;class T&gt;
  struct UnsignedIntegerConcept; // T は組み込み符号無し整数型であるか？

  template &lt;class X, class Y&gt;
  struct ConvertibleConcept; // X は Y へ変換可能か？

  template &lt;class T&gt;
  struct <a href="../utility/Assignable.html">Assignable</a>Concept; // 規格 23.1 参照

  template &lt;class T&gt;
  struct SGI<a href="http://www.sgi.com/tech/stl/Assignable.html" charset="us-ascii" hreflang="en-US">Assignable</a>Concept;

  template &lt;class T&gt;
  struct <a  href="http://www.sgi.com/tech/stl/DefaultConstructible.html" charset="us-ascii" hreflang="en-US">DefaultConstructible</a>Concept;

  template &lt;class T&gt; 
  struct <a href="../utility/CopyConstructible.html">CopyConstructible</a>Concept; // 規格 20.1.3 参照

  template &lt;class T&gt; 
  struct <a href="http://www.sgi.com/tech/stl/EqualityComparable.html" charset="us-ascii" hreflang="en-US">EqualityComparable</a>Concept; // 規格 20.1.1 参照

  template &lt;class T&gt;
  struct <a href="../utility/LessThanComparable.html">LessThanComparable</a>Concept; // 規格 20.1.2 参照

  template &lt;class T&gt;
  struct ComparableConcept; // SGI STL <a href="http://www.sgi.com/tech/stl/LessThanComparable.html" charset="us-ascii" hreflang="en-US">LessThanComparable</a> コンセプト
</pre>

<h3><a name="iterator-concepts" id="iterator-concepts">イテレータ･コンセプト･チェック用クラス</a></h3>

<pre>
  template &lt;class Iter&gt;
  struct <a href="http://www.sgi.com/tech/stl/trivial.html" charset="us-ascii" hreflang="en-US">TrivialIterator</a>Concept;

  template &lt;class Iter&gt;
  struct Mutable_TrivialIteratorConcept;

  template &lt;class Iter&gt;
  struct <a href="http://www.sgi.com/tech/stl/InputIterator.html" charset="us-ascii" hreflang="en-US">InputIterator</a>Concept; // 規格 24.1.1 Table 72 参照

  template &lt;class Iter, class T&gt; 
  struct <a href="http://www.sgi.com/tech/stl/OutputIterator.html" charset="us-ascii" hreflang="en-US">OutputIterator</a>Concept; // 規格 24.1.2 Table 73 参照

  template &lt;class Iter&gt; 
  struct <a href="http://www.sgi.com/tech/stl/ForwardIterator.html" charset="us-ascii" hreflang="en-US">ForwardIterator</a>Concept; // 規格 24.1.3 Table 74 参照

  template &lt;class Iter&gt; 
  struct Mutable_ForwardIteratorConcept;

  template &lt;class Iter&gt; 
  struct <a href="http://www.sgi.com/tech/stl/BidirectionalIterator.html" charset="us-ascii" hreflang="en-US">BidirectionalIterator</a>Concept; // 規格 24.1.4 Table 75 参照

  template &lt;class Iter&gt; 
  struct Mutable_BidirectionalIteratorConcept;

  template &lt;class Iter&gt; 
  struct <a href="http://www.sgi.com/tech/stl/RandomAccessIterator.html" charset="us-ascii" hreflang="en-US">RandomAccessIterator</a>Concept; // 規格 24.1.5 Table 76 参照

  template &lt;class Iter&gt; 
  struct Mutable_RandomAccessIteratorConcept;
</pre>

<h3><a name="function-object-concepts" id="function-object-concepts">関数オブジェクト・コンセプト･チェック用クラス</a></h3>

<pre>
  template &lt;class Func, class Return&gt;
  struct <a href="http://www.sgi.com/tech/stl/Generator.html" charset="us-ascii" hreflang="en-US">Generator</a>Concept;

  template &lt;class Func, class Return, class Arg&gt;
  struct <a href="http://www.sgi.com/tech/stl/UnaryFunction.html" charset="us-ascii" hreflang="en-US">UnaryFunction</a>Concept;

  template &lt;class Func, class Return, class First, class Second&gt;
  struct <a href="http://www.sgi.com/tech/stl/BinaryFunction.html" charset="us-ascii" hreflang="en-US">BinaryFunction</a>Concept;

  template &lt;class Func, class Arg&gt;
  struct Unary<a href="http://www.sgi.com/tech/stl/Predicate.html" charset="us-ascii" hreflang="en-US">Predicate</a>Concept;

  template &lt;class Func, class First, class Second&gt;
  struct <a href="http://www.sgi.com/tech/stl/BinaryPredicate.html" charset="us-ascii" hreflang="en-US">BinaryPredicate</a>Concept;

  template &lt;class Func, class First, class Second&gt;
  struct Const_BinaryPredicateConcept;

  template &lt;class Func, class Return&gt;
  struct <a href="http://www.sgi.com/tech/stl/AdaptableGenerator.html" charset="us-ascii" hreflang="en-US">AdaptableGenerator</a>Concept;

  template &lt;class Func, class Return, class Arg&gt;
  struct <a href="http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html" charset="us-ascii" hreflang="en-US">AdaptableUnaryFunction</a>Concept;

  template &lt;class Func, class First, class Second&gt;
  struct <a href="http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html" charset="us-ascii" hreflang="en-US">AdaptableBinaryFunction</a>Concept;

  template &lt;class Func, class Arg&gt;
  struct <a href="http://www.sgi.com/tech/stl/AdaptablePredicate.html" charset="us-ascii" hreflang="en-US">AdaptablePredicate</a>Concept;

  template &lt;class Func, class First, class Second&gt;
  struct <a href="http://www.sgi.com/tech/stl/AdaptableBinaryPredicate.html" charset="us-ascii" hreflang="en-US">AdaptableBinaryPredicate</a>Concept;
  
</pre>

<h3><a name="container-concepts" id="container-concepts">コンテナ･コンセプト･チェック用クラス</a></h3>

<pre>
  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/Container.html" charset="us-ascii" hreflang="en-US">Container</a>Concept; // 規格 23.1 Table 65 参照

  template &lt;class C&gt;
  struct Mutable_ContainerConcept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/ForwardContainer.html" charset="us-ascii" hreflang="en-US">ForwardContainer</a>Concept;

  template &lt;class C&gt;
  struct Mutable_ForwardContainerConcept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/ReversibleContainer.html" charset="us-ascii" hreflang="en-US">ReversibleContainer</a>Concept; // 規格 23.1 Table 66 参照

  template &lt;class C&gt;
  struct Mutable_ReversibleContainerConcept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/RandomAccessContainer.html" charset="us-ascii" hreflang="en-US">RandomAccessContainer</a>Concept;

  template &lt;class C&gt;
  struct Mutable_RandomAccessContainerConcept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/SequenceContainer.html" charset="us-ascii" hreflang="en-US">Sequence</a>Concept; // 規格 23.1.1 参照

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/FrontInsertionSequence.html" charset="us-ascii" hreflang="en-US">FrontInsertionSequence</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/BackInsertionSequence.html" charset="us-ascii" hreflang="en-US">BackInsertionSequence</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/Associative.html" charset="us-ascii" hreflang="en-US">AssociativeContainer</a>Concept; // 規格 23.1.2 Table 69 参照

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/UniqueAssociativeContainer.html" charset="us-ascii" hreflang="en-US">UniqueAssociativeContainer</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/MultipleAssociativeContainer.html" charset="us-ascii" hreflang="en-US">MultipleAssociativeContainer</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/SimpleAssociativeContainer.html" charset="us-ascii" hreflang="en-US">SimpleAssociativeContainer</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/PairAssociativeContainer.html" charset="us-ascii" hreflang="en-US">PairAssociativeContainer</a>Concept;

  template &lt;class C&gt;
  struct <a href="http://www.sgi.com/tech/stl/SortedAssociativeContainer.html" charset="us-ascii" hreflang="en-US">SortedAssociativeContainer</a>Concept;
</pre>


<h3><a name="basic-archetype" id="basic-archetype">基本原型クラス</a></h3>

<pre>
  template &lt;class T = int&gt;
  class null_archetype; // モデル化するコンセプトが無いことを示す型

  template &lt;class Base = null_archetype&gt;
  class default_constructible_archetype;

  template &lt;class Base = null_archetype&gt;
  class assignable_archetype;

  template &lt;class Base = null_archetype&gt;
  class copy_constructible_archetype;

  template &lt;class Base = null_archetype&gt;
  class equality_comparable_archetype;

  template &lt;class T, class Base = null_archetype&gt;
  class convertible_to_archetype;
</pre>

<h3><a name="iterator-archetype" id="iterator-archetype">イテレータ原型クラス</a></h3>

<pre>
  template &lt;class ValueType&gt;
  class trivial_iterator_archetype;

  template &lt;class ValueType&gt;
  class mutable_trivial_iterator_archetype;

  template &lt;class ValueType&gt;
  class input_iterator_archetype;

  template &lt;class ValueType&gt;
  class forward_iterator_archetype;

  template &lt;class ValueType&gt;
  class bidirectional_iterator_archetype;

  template &lt;class ValueType&gt;
  class random_access_iterator_archetype;

</pre>

<h3><a name="function-object-archetype" id="function-object-archetype">関数オブジェクト原型クラス</a></h3>

<pre>
  template &lt;class Arg, class Return&gt;
  class unary_function_archetype;

  template &lt;class Arg1, class Arg2, class Return&gt;
  class binary_function_archetype;

  template &lt;class Arg&gt;
  class predicate_archetype;

  template &lt;class Arg1, class Arg2&gt;
  class binary_predicate_archetype;
</pre>

<h3><a name="container-archetype" id="container-archetype">コンテナ原型クラス</a></h3>

<pre>
構築中
</pre>

<p><a href="concept_check.htm">Introduction へ戻る</a><br />
<a href="implementation.htm">前へ： Implementation</a></p>

<hr />

<table xml:lang="en-US" lang="en-US">
<tr valign="top">
  <td nowrap="nowrap">Copyright &copy; 2000</td>
  <td>
    <a href="../../people/jeremy_siek.htm">Jeremy Siek</a>,
    Univ.of Notre Dame (<a href="mailto:jsiek@lsc.nd.edu">jsiek@lsc.nd.edu</a>)
  </td>
</tr>
</table>

</body>
</html> 
