<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">

<!--
 - Copyright (c) Jeremy Siek and Andrew Lumsdaine 2000
 -
 - Permission to use, copy, modify, distribute and sell this software
 - and its documentation for any purpose is hereby granted without fee,
 - provided that the above copyright notice appears in all copies and
 - that both that copyright notice and this permission notice appear
 - in supporting documentation. We make no
 - representations about the suitability of this software for any
 - purpose. It is provided "as is" without express or implied warranty.
 -->

<head>

<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>コンセプト･チェックの実装</title>
</head>

<body bgcolor="white" text="black" link="#0000ee" vlink="#551a8b" alink="red">

<p><img src="../../c++boost.gif"  alt="C++ Boost" width="277" height="86" />
<br clear="all" /></p>

<h2><a name="implementation" id="implementation">Implementation</a></h2>

<p>
理想的には、実体化位置においてコンセプト侵害が捕らえられ、提示されるに及くはない。
D&amp;E [<a href="bibliography.htm#stroustrup94:_design_evolution">2</a>] が言及するように、エラーは、関数テンプレートが必要とする要求事項すべてを試行することにより捕らえることができる。
コードをコンパイルするのみで――<em>一切実行することなく</em> ――済ませたいが故に、要求事項（とくに有効式）を行使する方法は、まさに扱いにくい問題である。
我々のアプローチは、関数ポインタに代入される個別の関数に要求事項を試行させることである。
この場合、コンパイラは関数を実体化するだろうが、実際にそれを起動することはない。
さらに、コンパイラの最適化によって「死んでいるコード」としてポインタ代入は削除されうだろう（代入によって課される実行時オーバヘッドは、どんな場合でも些細であろうが）。
まず第一に、コンパイラが制約関数のセマンティクス解析およびコンパイルをスキップすることは考えられるかもしれない。
そうなれば、関数ポインタ・テクニックは効力を失うだろう。
しかし、不必要なコードおよび関数の除去が、通常はコンパイルの後半の段階で行われるので、これはありそうもない。
関数ポインタ・テクニックは、GNU C++、Microsoft Visual C++、およびいくつかの EDG ベースのコンパイラ（KAI C++、SGI MIPSpro）で問題なく使用できた。
以下のコードは、このテクニックを <code>std::stable_sort()</code> 関数に適用する方法を示す：
</p>

<pre>
  template &lt;class RandomAccessIterator&gt;
  void stable_sort_constraints(RandomAccessIterator i)
  {
    typename std::iterator_traits&lt;RandomAccessIterator&gt;
      ::difference_type n;
    i += n;  // exercise the requirements for RandomAccessIterator
    ...
  }
  template &lt;class RandomAccessIterator&gt;
  void stable_sort(RandomAccessIterator first, RandomAccessIterator last)
  {
    typedef void (*fptr_type)(RandomAccessIterator);
    fptr_type x = &amp;stable_sort_constraints;
    ...
  }
</pre>

<p>
多くの場合、確認される必要のある要求事項の集合は多大なものとなる。
また、ライブラリ実装者にとって、すべての公開関数テンプレートのために <code>stable_sort_constraints()</code> のような制約関数を書くのは煩わしいことだろう。
代わりに、対応するコンセプトの定義に従って、有効式の集合を一まとめにする。
各コンセプトに対して、テンプレート・パラメータがあるところでその型をチェックするために、コンセプト・チェック用クラステンプレートを定義する。
このクラスは、コンセプトの有効式をすべて試行する <code>contraints()</code> メンバ関数を含んでいる。
<code>n</code> や <code>i</code> などのような制約関数の中で使用されるオブジェクトは、コンセプト・チェック用クラスのデータ・メンバとして宣言する。
</p>

<pre>
  template &lt;class Iter&gt;
  struct RandomAccessIterator_concept
  {
    void constraints()
    {
      i += n;
      ...
    }
    typename std::iterator_traits&lt;RandomAccessIterator&gt;
      ::difference_type n;
    Iter i;
    ...
  };
</pre>

<p>
これでメンバ関数ポインタを扱わなくてはならなくなったが、制約関数の実体化を引き起こすために関数ポインタ・メカニズムを使用することは、依然として可能である。
ライブラリ実装者がコンセプト・チェックを呼出すことを簡便にするために、<code>function_requires()</code> という名前の関数の中に、メンバ関数ポインタ機構を隠蔽した。
以下のコード片は、イテレータが <a href="http://www.sgi.com/tech/stl/RandomAccessIterator.html">RandomAccessIterator</a> であることを確かめるために <code>function_requires()</code> を使用する方法を提示する。
</p>

<pre>
  template &lt;class Iter&gt;
  void stable_sort(Iter first, Iter last)
  {
    function_requires&lt; RandomAccessIteratorConcept&lt;Iter&gt; &gt;();
    ...
  }
</pre>

<p>
<code>function_requires()</code> の定義は以下のとおりである。
<code>Concept</code> は、モデルとなる型によって実体化された、コンセプト・チェック用クラスである。
我々は、関数ポインタ <code>x</code> に制約メンバ関数のアドレスを代入する。
そうすることで、制約関数の実体化およびコンセプトの有効式のチェックを行うことができる。
それから、変数が未使用であることを示すコンパイラ警告を回避するために、<code>x</code> へ <code>x</code> を代入し、名前衝突を防ぐために、全体を do-while ループで包む。
</p>

<pre>
  template &lt;class Concept&gt;
  void function_requires()
  {
    void (Concept::*x)() = BOOST_FPTR Concept::constraints;
    ignore_unused_variable_warning(x);
  }
</pre>

<p>
クラス・テンプレートの型パラメータをチェックするために、クラス定義本体内で使用できる <code>BOOST_CLASS_REQUIRE</code> マクロを提供する（関数では本体内で <code>function_requires()</code> のみを使用すればよいのと対照的である）。
このマクロは入れ子クラス・テンプレートを宣言し、そのテンプレート・パラメータは関数ポインタである。
それから、typedef の中で、テンプレート引数として、制約関数への関数ポインタ型を渡して入れ子クラス型を使用する。
名前衝突を防ぐ支援として、入れ子クラスおよび typedef 名において <code>type_var</code> と<code>concept</code>の名前を使用する。
</p>

<pre>
#define BOOST_CLASS_REQUIRE(type_var, ns, concept) \
  typedef void (ns::concept &lt;type_var&gt;::* func##type_var##concept)(); \
  template &lt;func##type_var##concept _Tp1&gt; \
  struct concept_checking_##type_var##concept { }; \
  typedef concept_checking_##type_var##concept&lt; \
    BOOST_FPTR ns::concept&lt;type_var&gt;::constraints&gt; \
    concept_checking_typedef_##type_var##concept
</pre>

<p>
さらに、２つ以上の型の相互作用を必要とするコンセプトを扱うために、より多くの引数をとる <code>BOOST_CLASS_REQUIRE</code> のバージョンがある。
コンパイラの中には、関数ポインタ型のテンプレート・パラメータを実装しないものが複数あるため、BCCL コンセプト・チェックの実装においては<code>BOOST_CLASS_REQUIRE</code> を使用していない。
</p>

<!-- 誤用を避けることが難しいために、このヴァージョンを用いないことに決めた。

<p>
クラス・テンプレートの型パラメータをチェックするために、クラス定義本体内で使用できる <code>class_requires</code> クラス・テンプレートを提供する（関数では本体内で <code>function_requires()</code> のみを使用すればよいのと対照的である）。
<code>class_requires</code> は入れ子クラス・テンプレートを宣言し、そのテンプレート・パラメータは関数ポインタである。
それから、typedef の中で、テンプレート引数として、制約関数への関数ポインタ型を渡して入れ子クラス型を使用する。
</p>

<pre>
  template &lt;class Concept&gt;
  class class_requires
  {
    typedef void (Concept::* function_pointer)();

    template &lt;function_pointer Fptr&gt;
    struct dummy_struct { };
  public:
    typedef dummy_struct&lt; BOOST_FPTR Concept::constraints &gt; check;
  };
</pre>

<p>コンパイラの中には、関数ポインタ型のテンプレート・パラメータを実装しないものが複数あるため、BCCL コンセプト・チェックの実装においては<code>class_requires</code> を使用していない</p>。

-->

<p>
<a href="./reference.htm">次へ： Reference</a><br />
<a href="prog_with_concepts.htm">前へ： Programming With Concepts</a>
</p>

<hr />

<table xml:lang="en-US" lang="en-US">
<tr valign="top">
  <td nowrap="nowrap">Copyright &copy; 2000</td>
  <td>
    <a href="../../people/jeremy_siek.htm">Jeremy Siek</a>,
    Univ.of Notre Dame (<a href="mailto:jsiek@lsc.nd.edu">jsiek@lsc.nd.edu</a>)
  </td>
</tr>
</table>

</body>
</html>
