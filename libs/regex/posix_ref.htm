<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=utf-8">
<meta name="Template"
content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Regex++, POSIX API Reference</title>
</head>

<body bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">

<p>&nbsp; </p>

<table border="0" cellpadding="7" cellspacing="0" width="100%">
    <tr>
        <td valign="top"><h3><img src="../../c++boost.gif"
        alt="C++ Boost" width="276" height="86"></h3>
        </td>
        <td valign="top"><h3 align="center">Regex++, POSIX API
        Reference. </h3>
        <p align="left"><i>Copyright (c) 1998-2001 </i></p>
        <p align="left"><i>Dr John Maddock</i></p>
        <p align="left"><i>Permission to use, copy, modify,
        distribute and sell this software and its documentation
        for any purpose is hereby granted without fee, provided
        that the above copyright notice appear in all copies and
        that both that copyright notice and this permission
        notice appear in supporting documentation. Dr John
        Maddock makes no representations about the suitability of
        this software for any purpose. It is provided &quot;as is&quot;
        without express or implied warranty.</i></p>
        </td>
    </tr>
</table>

<hr>

<h3><a name="posix"></a><i>POSIX compatibility library</i></h3>

<pre>#include &lt;boost/cregex.hpp&gt;
<i>or</i>:
#include &lt;boost/regex.h&gt;</pre>

<!--<p>The following functions are available for users who need a
POSIX compatible C library, they are available in both Unicode
and narrow character versions, the standard POSIX API names are
macros that expand to one version or the other depending upon
whether UNICODE is defined or not. </p>-->
<p>次の関数は POSIX 互換 C ライブラリが必要なユーザにとって役立つ。
これらは Unicode版 とナロウ文字版両方で利用可能である。
POSIX 標準 API の名前は、 UNICODE が定義されているかにより
どちらかの版を拡張したマクロである。</p>

<!--<p><b>Important</b>: Note that all the symbols defined here are
enclosed inside namespace <i>boost</i> when used in C++ programs,
unless you use #include &lt;boost/regex.h&gt; instead - in which
case the symbols are still defined in namespace boost, but are
made available in the global namespace as well.</p>-->
<p><b>重要</b>: ここで定義されるシンボルは、
&lt;boost/regex.h&gt; がインクルードされない限り、
C++ プログラムで使われるときは全て、
名前空間 <i>boost</i> の中にあることに注意せよ。
&lt;boost/regex.h&gt; がインクルードされていても、
シンボルは名前空間 boost の中で定義されているが、
グローバル名前空間と同じように利用することが出来る。</p>

<!--<p>The functions are defined as: </p>-->
<p>関数は次のように定義されている。</p>

<pre>extern &quot;C&quot; {
<b>int</b> regcompA(regex_tA*, <b>const</b> <b>char</b>*, <b>int</b>);
<b>unsigned</b> <b>int</b> regerrorA(<b>int</b>, <b>const</b> regex_tA*, <b>char</b>*, <b>unsigned</b> <b>int</b>);
<b>int</b> regexecA(<b>const</b> regex_tA*, <b>const</b> <b>char</b>*, <b>unsigned</b> <b>int</b>, regmatch_t*, <b>int</b>);
<b>void</b> regfreeA(regex_tA*);

<b>int</b> regcompW(regex_tW*, <b>const</b> <b>wchar_t</b>*, <b>int</b>);
<b>unsigned</b> <b>int</b> regerrorW(<b>int</b>, <b>const</b> regex_tW*, <b>wchar_t</b>*, <b>unsigned</b> <b>int</b>);
<b>int</b> regexecW(<b>const</b> regex_tW*, <b>const</b> <b>wchar_t</b>*, <b>unsigned</b> <b>int</b>, regmatch_t*, <b>int</b>);
<b>void</b> regfreeW(regex_tW*);

#ifdef UNICODE
#define regcomp regcompW
#define regerror regerrorW
#define regexec regexecW
#define regfree regfreeW
#define regex_t regex_tW
#else
#define regcomp regcompA
#define regerror regerrorA
#define regexec regexecA
#define regfree regfreeA
#define regex_t regex_tA
#endif
}</pre>

<!--<p>All the functions operate on structure <b>regex_t</b>, which
exposes two public members: </p>-->
<p>全ての関数は構造体 <b>regex_t</b> に対して作用する。
構造体 <b>regex_t</b> は二つの公開メンバを持っている。</p>

<!--<p><b>unsigned int re_nsub</b> this is filled in by <b>regcomp</b>
and indicates the number of sub-expressions contained in the
regular expression. </p>-->
<p><b>unsigned int re_nsub</b> これは <b>regcomp</b> によって書き込まれ、
正規表現に含まれる子表現の数を表している。</p>

<!--<p><b>const TCHAR* re_endp</b> points to the end of the
expression to compile when the flag REG_PEND is set. </p>-->
<p><b>const TCHAR* re_endp</b> はフラグ REG_PEND が設定されているとき、
コンパイルする正規表現の末端を指す。</p>

<!--<p><i>Footnote: regex_t is actually a #define - it is either
regex_tA or regex_tW depending upon whether UNICODE is defined or
not, TCHAR is either char or wchar_t again depending upon the
macro UNICODE.</i> </p>-->
<p><i>脚注: regex_t は実際はマクロ定義である。
これは UNICODE が定義されているかどうかに依存して、 regex_tA か regex_tW を定義している。
TCHAR は マクロ UNICODE に依存した、char か wchar_t の再定義である。</i></p>

<!--<p><b>regcomp</b> takes a pointer to a <b>regex_t</b>, a pointer
to the expression to compile and a flags parameter which can be a
combination of: <br>
&nbsp; </p>-->
<p><b>regcomp</b> は <b>regex_t</b> へのポインタを受け取る。
このポインタはコンパイルする正規表現と、
組み合わせることの出来るフラグパラメータを指す。<br>
&nbsp; </p>

<table border="0" cellpadding="7" cellspacing="0" width="100%">
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_EXTENDED</td>
<!--        <td valign="top" width="45%">Compiles modern regular
        expressions. Equivalent to regbase::char_classes |
        regbase::intervals | regbase::bk_refs.</td>-->
        <td valign="top" width="45%">モダンな正規表現をコンパイルする。
        regbase::char_classes | regbase::intervals | regbase::bk_refs
	と等価である。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_BASIC</td>
<!--        <td valign="top" width="45%">Compiles basic (obsolete)
        regular expression syntax. Equivalent to regbase::char_classes
        | regbase::intervals | regbase::limited_ops | regbase::bk_braces
        | regbase::bk_parens | regbase::bk_refs.</td>-->
        <td valign="top" width="45%">基本的な(時代遅れの)正規表現構文をコンパイルする。
	regbase::char_classes | regbase::intervals | regbase::limited_ops | regbase::bk_braces
        | regbase::bk_parens | regbase::bk_refs と等価である。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_NOSPEC</td>
<!--        <td valign="top" width="45%">All characters are ordinary,
        the expression is a literal string.</td>-->
        <td valign="top" width="45%">全ての文字は通常の文字であり、正規表現はリテラル文字列である。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_ICASE</td>
<!--        <td valign="top" width="45%">Compiles for matching that
        ignores character case.</td>-->
        <td valign="top" width="45%">大文字小文字の区別なく一致するためのコンパイル</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_NOSUB</td>
<!--        <td valign="top" width="45%">Has no effect in this
        library.</td>-->
        <td valign="top" width="45%">このライブラリでは何の作用もない。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_NEWLINE</td>
<!--        <td valign="top" width="45%">When this flag is set a dot
        does not match the newline character.</td>-->
        <td valign="top" width="45%">このフラグが設定されているとき、
	ドット文字は改行文字に一致しない。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_PEND</td>
<!--        <td valign="top" width="45%">When this flag is set the
        re_endp parameter of the regex_t structure must point to
        the end of the regular expression to compile.</td>-->
        <td valign="top" width="45%">このフラグが設定されているとき、
	regex_t 構造体の re_endp パラメータは翻訳する正規表現の
	終端を指していなければならない。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_NOCOLLATE</td>
<!--        <td valign="top" width="45%">When this flag is set then
        locale dependent collation for character ranges is turned
        off.</td>-->
        <td valign="top" width="45%">このフラグが設定されているとき、
	ロケールに依存した文字範囲の照合は行われない。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_ESCAPE_IN_LISTS<br>
        , , , </td>
<!--        <td valign="top" width="45%">When this flag is set, then
        escape sequences are permitted in bracket expressions (character
        sets).</td>-->
        <td valign="top" width="45%">このフラグが設定されているとき、
	大括弧表現(文字集合)のなかでエスケープシーケンスが許される。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_NEWLINE_ALT&nbsp;</td>
<!--        <td valign="top" width="45%">When this flag is set then
        the newline character is equivalent to the alternation
        operator |.</td>-->
        <td valign="top" width="45%">このフラグが設定されているとき、
	改行文字は排他演算子 | と等価である。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_PERL&nbsp;</td>
<!--        <td valign="top" width="45%">&nbsp;A shortcut for perl-like
        behavior: REG_EXTENDED | REG_NOCOLLATE |
        REG_ESCAPE_IN_LISTS</td>-->
        <td valign="top" width="45%">&nbsp; perl のような振る舞いの略記:
        REG_EXTENDED | REG_NOCOLLATE | REG_ESCAPE_IN_LISTS</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_AWK</td>
<!--        <td valign="top" width="45%">A shortcut for awk-like
        behavior: REG_EXTENDED | REG_ESCAPE_IN_LISTS</td>-->
        <td valign="top" width="45%">awk のような振る舞いの略記:
        REG_EXTENDED | REG_ESCAPE_IN_LISTS</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_GREP</td>
<!--        <td valign="top" width="45%">A shortcut for grep like
        behavior: REG_BASIC | REG_NEWLINE_ALT</td>-->
        <td valign="top" width="45%">grep のような振る舞いの略記:
        REG_BASIC | REG_NEWLINE_ALT</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="45%">REG_EGREP</td>
<!--        <td valign="top" width="45%">&nbsp;A shortcut for egrep
        like behavior: REG_EXTENDED | REG_NEWLINE_ALT</td>-->
        <td valign="top" width="45%">&nbsp;egrep のような振る舞いの略記:
        REG_EXTENDED | REG_NEWLINE_ALT</td>
        <td width="5%">&nbsp;</td>
    </tr>
</table>

<p><br>
&nbsp; </p>

<!--<p><b>regerror</b> takes the following parameters, it maps an
error code to a human readable string: <br>
&nbsp; </p>-->
<p><b>regerror</b> は次のパラメータを受け取る。
これはエラーコードを人間に可読な文字列に変換する。<br>
&nbsp; </p>

<table border="0" cellpadding="7" cellspacing="0" width="100%">
    <tr>
        <td width="5%">&nbsp;</td>
<!--        <td valign="top" width="50%">int code</td>
        <td valign="top" width="50%">The error code.</td>-->
        <td valign="top" width="50%">int code</td>
        <td valign="top" width="50%">エラーコード</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="50%">const regex_t* e</td>
<!--        <td valign="top" width="50%">The regular expression (can
        be null).</td>-->
        <td valign="top" width="50%">正規表現( null でもよい)</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="50%">char* buf</td>
<!--        <td valign="top" width="50%">The buffer to fill in with
        the error message.</td>-->
        <td valign="top" width="50%">エラーメッセージを書き込むバッファ</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="50%">unsigned int buf_size</td>
<!--        <td valign="top" width="50%">The length of buf.</td>-->
        <td valign="top" width="50%">バッファサイズ</td>
        <td>&nbsp;</td>
    </tr>
</table>

<!--<p>If the error code is OR'ed with REG_ITOA then the message that
results is the printable name of the code rather than a message,
for example &quot;REG_BADPAT&quot;. If the code is REG_ATIO then <b>e</b>
must not be null and <b>e-&gt;re_pend</b> must point to the
printable name of an error code, the return value is then the
value of the error code. For any other value of <b>code</b>, the
return value is the number of characters in the error message, if
the return value is greater than or equal to <b>buf_size</b> then
<b>regerror</b> will have to be called again with a larger buffer.</p>-->
<p>もし、エラーコードが REG_ITOA を含む(訳注: code & REG_ITOA が真)なら、
その結果のメッセージは、メッセージというよりは、
例えば &quot;REG_BADPAT&quot; のような印字可能なコード名である。
コードが REG_ATIO なら <b>e</b> は null であってはならない。
そして <b>e-&gt;re_pend</b> は印字可能なエラーコードを指していなければならない。
その時の戻り値は、エラーコードの値である。
<b>code</b> がそれ以外ならどんな値の時にも、戻り値はエラーメッセージの文字数である。
戻り値が <b>buf_size</b> と同じか、それより大きければ、
<b>regerror</b> はより大きなバッファでもう一度呼ばれなければならない。</p>

<!--<p><b>regexec</b> finds the first occurrence of expression <b>e</b>
within string <b>buf</b>. If <b>len</b> is non-zero then *<b>m</b>
is filled in with what matched the regular expression, <b>m[0]</b>
contains what matched the whole string, <b>m[1] </b>the first sub-expression
etc, see <b>regmatch_t</b> in the header file declaration for
more details. The <b>eflags</b> parameter can be a combination of:
<br>
&nbsp; </p>-->
<p><b>regexec</b> は文字列 <b>buf</b> の中の最初の正規表現 <b>e</b> を発見する。
もし <b>len</b> が非0なら、 *<b>m</b> には何が正規表現に一致したかを書き込まれる。
<b>m[0]</b> は文字列全体と一致したものを持ち、
<b>m[1]</b> は最初の子表現であり、以下同様である。
より詳細は、ヘッダファイルでの <b>regmatch_t</b> の宣言を見よ。
<b>eflags</b> パラメータは次の値の組み合わせである:
<br>
&nbsp; </p>

<table border="0" cellpadding="7" cellspacing="0" width="100%">
    <tr>
        <td width="5%">&nbsp;</td>
        <td valign="top" width="50%">REG_NOTBOL</td>
<!--        <td valign="top" width="50%">Parameter <b>buf </b>does
        not represent the start of a line.</td>-->
        <td valign="top" width="50%">パラメータ <b>buf </b> は行のはじめを表さない。</td>
        <td width="5%">&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="50%">REG_NOTEOL</td>
<!--        <td valign="top" width="50%">Parameter <b>buf</b> does
        not terminate at the end of a line.</td>-->
        <td valign="top" width="50%">パラメータ <b>buf</b> は行の終端で終わらない。</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
        <td>&nbsp;</td>
        <td valign="top" width="50%">REG_STARTEND</td>
<!--        <td valign="top" width="50%">The string searched starts
        at buf + pmatch[0].rm_so and ends at buf + pmatch[0].rm_eo.</td>-->
        <td valign="top" width="50%">検索される文字列は、 buf + pmatch[0].rm_so で始まり、
	buf + pmatch[0].rm_eo で終わる。</td>
        <td>&nbsp;</td>
    </tr>
</table>

<p><br>
&nbsp; </p>

<!--<p>Finally <b>regfree</b> frees all the memory that was allocated
by regcomp. </p>-->
<p>最後に <b>regfree</b> は regcomp によって割り当てられた全てのメモリを解放する。</p>

<!--<p><i>Footnote: this is an abridged reference to the POSIX API
functions, it is provided for compatibility with other libraries,
rather than an API to be used in new code (unless you need access
from a language other than C++). This version of these functions
should also happily coexist with other versions, as the names
used are macros that expand to the actual function names.</i> <br>
</p>-->
<p><i>脚注: これは POSIX API 関数の簡略したリファレンスであり、
(もし C++ 以外の言語からアクセスする必要がなければ)
新しいコードでこれらの API を使うためというよりは
他のライブラリとの互換性を提供する。
これらの関数のこのバージョンは、幸いなことに他のバージョンと共存できる。
使われる名前は、実際の関数名を拡張したマクロだからだ。</i><br>
</p>

<hr>

<p><i>Copyright </i><a href="mailto:John_Maddock@compuserve.com"><i>Dr
John Maddock</i></a><i> 1998-2000 all rights reserved.</i> </p>
<hr align="left">
<p><i>Japanese Translation Copyright (C) 2003 <a href="mailto:kohske@msc.biglobe.ne.jp">Kohske Takahashi</a></i></p>
<p>
オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の
複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」
に提供されており、いかなる明示的、暗黙的保証も行わない。また、
いかなる目的に対しても、その利用が適していることを関知しない。
</p>
</body>
</html>
