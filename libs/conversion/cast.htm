<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Header boost/cast.hpp Documentation</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<h1><img src="../../c++boost.gif" alt="c++boost.gif (8819 bytes)" align="middle" width="277" height="86">Header
<a href="../../boost/cast.hpp">boost/cast.hpp</a></h1>

<!--
<h2><a name="Cast Functions">Cast Functions</a></h2>
-->
<h2><a name="Cast Functions">キャスト関数</a></h2>

<!--
<p>The header <a href="../../boost/cast.hpp">boost/cast.hpp</a>
provides <a href="#Polymorphic_cast"><b>polymorphic_cast</b></a>, <a href="#Polymorphic_cast"><b>polymorphic_downcast</b></a>,
and <a href="#numeric_cast"><b>numeric_cast</b></a> function templates designed
to complement the C++ built-in casts.</p>
-->
<p>ヘッダ<a href="../../boost/cast.hpp">boost/cast.hpp</a>は、C++の組み込みキャストを補完するべく作成された、
<a href="#Polymorphic_cast"><b>polymorphic_cast</b></a>, 
<a href="#Polymorphic_cast"><b>polymorphic_downcast</b></a>, 
<a href="#numeric_cast"><b>numeric_cast</b></a>を提供する。</p>

<!--
<p>The program <a href="cast_test.cpp">cast_test.cpp</a> can be used to
verify these function templates work as expected.</p>
-->
<p>プログラム<a href="cast_test.cpp">cast_test.cpp</a>は、これらの関数が期待通り動作するか確認するためのものである。</p>

<!--
<h3><a name="Polymorphic_cast">Polymorphic casts</a></h3>
-->
<h3><a name="Polymorphic_cast">多態キャスト</a></h3>

<!--
<p>Pointers to polymorphic objects (objects of classes which define at least one
virtual function) are sometimes downcast or crosscast. Downcasting means
casting from a base class to a derived class. Crosscasting means casting
across an inheritance hierarchy diagram, such as from one base to the other in a
<b>Y</b> diagram hierarchy.</p>
-->
<p>多態オブジェクト(少なくとも一個の仮想関数を定義しているクラスのオブジェクト)へのポインタは、時にダウンキャストやクロスキャストされることがある。ダウンキャストとは基本クラスから派生クラスへのキャストである。クロスキャストは継承階層を横切るようなキャストである。例えば、多重継承した基本クラスの一つから、他の基本クラスへのキャストなど。</p>

<!--
<p>Such casts can be done with old-style casts, but this approach is never to be
recommended. Old-style casts are sorely lacking in type safety, suffer
poor readability, and are difficult to locate with search tools.</p>
-->
<p>このようなキャストは古いキャスト演算子でも可能であるが、もうこのアプローチは推奨されない。古いキャスト演算子は型安全性に著しく欠け、可読性を激しく損ない、おまけに検索するのが大変なので。</p>

<!--
<p>The C++ built-in <b>static_cast</b> can be used for efficiently downcasting
pointers to polymorphic objects, but provides no error detection for the case
where the pointer being cast actually points to the wrong derived class. The <b>polymorphic_downcast</b>
template retains the efficiency of <b>static_cast</b> for non-debug
compilations, but for debug compilations adds safety via an assert() that a <b>dynamic_cast</b>
succeeds.</p>
-->
<p>C++に組み込まれた<b>static_cast</b>は、多態オブジェクトへのポインタを効率よくダウンキャストするが、ポインタが実際に指しているのと異なる派生クラスへのキャストをしようとしたとき、エラーを検出しない。
<b>polymorphic_downcast</b>テンプレートは、非デバッグコンパイル時には、<b>static_cast</b>の効率を維持するが、デバッグコンパイル時には、<b>dynamic_cast</b>の成功をassert()によって保証し、安全性を高める。</p>

<!--
<p>The C++ built-in <b>dynamic_cast</b> can be used for downcasts and crosscasts
of pointers to polymorphic objects, but error notification in the form of a
returned value of 0 is inconvenient to test, or worse yet, easy to forget to
test. The <b>polymorphic_cast</b> template performs a <b>dynamic_cast</b>,
and throws an exception if the <b>dynamic_cast</b> returns 0.</p>
-->
<p>C++に組み込まれた<b>dynamic_cast</b>は、多態オブジェクトへのポインタをダウンキャストまたはクロスキャストするために使うことができるが、エラーを知るには不便にも、返却値が0でないかチェックしなければならず、さらに悪いことに、チェックしないでも済ますことができる。
<b>polymorphic_cast</b>テンプレートは<b>dynamic_cast</b>を行い、返却値が0だったときには例外を送出する。</p>

<!--
<p>A <b>polymorphic_downcast</b> is preferred when debug-mode tests will cover
100% of the object types possibly cast and when non-debug-mode efficiency is an
issue. If these two conditions are not present, <b>polymorphic_cast</b> is
preferred. It must also be used for crosscasts. It does an assert(
dynamic_cast&lt;Derived&gt;(x) == x ) where x is the base pointer, ensuring that
not only is a non-zero pointer returned, but also that it correct in the
presence of multiple inheritance.<b> Warning:</b>: Because <b>polymorphic_downcast</b>
uses assert(), it violates the one definition rule (ODR) if NDEBUG is inconsistently
defined across translation units. [See ISO Std 3.2]</p>
-->
<p><b>polymorphic_downcast</b>は、デバッグモードでのテストで、キャストされうるオブジェクト型を100%カバーでき、同時に非デバッグモードでは効率が重要な場合に役立つであろう。
この二つの条件が満たされないなら、<b>polymorphic_cast</b>が適している。また、クロスキャストにはこちらを使わなければならない。
<b>polymorphic_downcast</b>は、assert( dynamic_cast&lt;Derived&gt;(x) == x ) (xは基本クラスへのポインタ)を行う。0が返されなかったばかりでなく、多重継承したオブジェクトへのポインタも正しく変換されたことを保証するためである。
<b>注意:</b>: <b>polymorphic_downcast</b>はassert()を使っているので、NDEBUGの定義が翻訳単位間で異なっていると、単一定義規則(ODR)に違反する。[See ISO Std 3.2]</p>

<!--
<p>The C++ built-in <b>dynamic_cast</b> must be used to cast references rather
than pointers. It is also the only cast that can be used to check whether
a given interface is supported; in that case a return of 0 isn't an error
condition.</p>
-->
<p>C++に組み込まれた<b>dynamic_cast</b>は、ポインタではなく参照のキャストに使われるべきである。さもなくば、あるインタフェースがサポートされているかどうか調べるために使うことができる。この場合、返却値が0になることはエラーではない。</p>

<!--
<h3>polymorphic_cast and polymorphic_downcast synopsis</h3>
-->
<h3>polymorphic_castとpolymorphic_downcastの概要</h3>

<blockquote>
  <pre>namespace boost {

template &lt;class Derived, class Base&gt;
inline Derived polymorphic_cast(Base* x);
<!--
// Throws: std::bad_cast if ( dynamic_cast&lt;Derived&gt;(x) == 0 )
// Returns: dynamic_cast&lt;Derived&gt;(x)
-->
// Throws: dynamic_cast&lt;Derived&gt;(x) == 0のときstd::bad_castを送出する
// Returns: dynamic_cast&lt;Derived&gt;(x)

template &lt;class Derived, class Base&gt;
inline Derived polymorphic_downcast(Base* x);
// Effects: assert( dynamic_cast&lt;Derived&gt;(x) == x );
// Returns: static_cast&lt;Derived&gt;(x)

}</pre>
</blockquote>

<!--
<h3>polymorphic_downcast example</h3>
-->
<h3>polymorphic_downcastの例</h3>

<blockquote>
  <pre>#include &lt;boost/cast.hpp&gt;
...
class Fruit { public: virtual ~Fruit(){}; ... };
class Banana : public Fruit { ... };
...
void f( Fruit * fruit ) {
// ... logic which leads us to believe it is a Banana
  Banana * banana = boost::polymorphic_downcast&lt;Banana*&gt;(fruit);
  ...</pre>
</blockquote>

<h3><a name="numeric_cast">numeric_cast</a></h3>

<!--
<p>A <b>static_cast</b> or implicit conversion will not
detect failure to preserve range for numeric casts. The <b>numeric_cast</b> function
templates are similar to <b>static_cast</b> and certain (dubious)
implicit conversions in this respect, except that they detect loss of numeric
range. An exception is thrown when a runtime value-preservation check fails.</p>
-->
<p><b>static_cast</b>や暗黙の変換は、数値をキャストしたときに、表現できる範囲を越えてしまっても感知しない。<b>numeric_cast</b>関数テンプレートは<b>static_cast</b>(や暗黙の変換にも、まあ、そこそこ)に似ているが、値の範囲を越えた場合、検出できる点が異なる。実行時に、値が正しく保存されるかチェックして、失敗した場合、例外が送出される。</p>

<!--
<p>The requirements on the argument and result types are:</p>
-->
<p>引数型と返却値型の必須事項は次の通り:</p>

<!--
<blockquote>
  <ul>
    <li>Both argument and result types are CopyConstructible [ISO Std 20.1.3].</li>
    <li>Both argument and result types are Numeric, defined by <code>std::numeric_limits&lt;&gt;::is_specialized</code>
      being true.</li>
    <li>The argument can be converted to the result type using <b>static_cast</b>.</li>
  </ul>
</blockquote>
-->
<blockquote>
  <ul>
    <li>引数型と返却値型は、いずれもCopyConstructible [ISO Std 20.1.3]でなければならない。</li>
    <li>引数型と返却値型は、いずれも(<code>std::numeric_limits&lt;&gt;::is_specialized</code>が真であることで定義される)Numericでなければならない。</li>
    <li>引数型は、返却値型に<b>static_cast</b>を用いて変換できなければならない。</li>
  </ul>
</blockquote>

<!--
<h3>numeric_cast synopsis</h3>
-->
<h3>numeric_castの概要</h3>

<blockquote>
  <pre>namespace boost {

class bad_numeric_cast : public std::bad_cast {...};

template&lt;typename Target, typename Source&gt;
  inline Target numeric_cast(Source arg);
<!--
    // Throws:  bad_numeric_cast unless, in converting arg from Source to Target,
    //          there is no loss of negative range, and no underflow, and no
    //          overflow, as determined by std::numeric_limits
-->
    // Throws:  SourceからTagertへの変換によって、std::numeric_limitsの定めに
    //          従い、負数の符号が無くなったり、アンダーフローやオーバーフロー
    //          する場合、bad_numeric_castを送出する。
    // Returns: static_cast&lt;Target&gt;(arg)

}</pre>
</blockquote>

<!--
<h3>numeric_cast example</h3>
-->
<h3>numeric_castの例</h3>

<blockquote>
  <pre>#include &lt;boost/cast.hpp&gt;
using namespace boost::cast;

void ariane(double vx)
{
    ...
    unsigned short dx = numeric_cast&lt;unsigned short&gt;(vx);
    ...
}</pre>
</blockquote>

<!--
<h3>numeric_cast rationale</h3>
-->
<h3>numeric_castの理論的根拠</h3>

<!--
<p>The form of the throws condition is specified so that != is not a required
operation.</p>
-->
<p>例外送出の条件は、!= 演算の必要を無くすように構成されている。</p>

<!--
<h3>History</h3>
-->
<h3>歴史的経緯</h3>

<!--
<p><b>polymorphic_cast</b> was suggested by Bjarne Stroustrup in &quot;The C++
Programming Language&quot;.<br>
<b>polymorphic_downcast</b> was contributed by <a href="../../people/dave_abrahams.htm">Dave
Abrahams</a>.<b><br>
numeric_cast</b> was contributed by <a href="../../people/kevlin_henney.htm">Kevlin
Henney</a>.</p>
-->
<p><b>polymorphic_cast</b>は&quot;The C++ Programming Language&quot;においてBjarne Stroustrupより提案された。<br>
<b>polymorphic_downcast</b>は<a href="../../people/dave_abrahams.htm">Dave Abrahams</a>より寄贈された。<br>
<b>numeric_cast</b>は<a href="../../people/kevlin_henney.htm">Kevlin Henney</a>より寄贈された。</p>

<hr>
<p>Revised <!--webbot bot="Timestamp" s-type="EDITED" s-format="%d %B, %Y" startspan
-->06 January, 2001<!--webbot bot="Timestamp" endspan i-checksum="38320"
--></p>
<p>ｩ Copyright boost.org 1999. Permission to copy, use, modify, sell and
distribute this document is granted provided this copyright notice appears in
all copies. This document is provided &quot;as is&quot; without express or
implied warranty, and with no claim as to its suitability for any purpose.</p>

<p>Japanese Translation Copyright (C) 2003 Yoshinori Tagawa.
オリジナルの、及びこの著作権表示が全ての複製の中に現れる限り、この文書の 複製、利用、変更、販売そして配布を認める。このドキュメントは「あるがまま」 に提供されており、いかなる明示的、暗黙的保証も行わない。また、 いかなる目的に対しても、その利用が適していることを関知しない。</p>
</body>

</html>
